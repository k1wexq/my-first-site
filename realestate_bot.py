#!/usr/bin/env python3
import asyncio
from collections import Counter
from telethon import TelegramClient, events
import matplotlib.pyplot as plt
from io import BytesIO
import re
from datetime import datetime, timedelta, timezone
from telethon import Button
import time
import logging
import sqlite3
import json
import hashlib
import os

# ------------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• -------------------
class Database:
    def __init__(self, db_name='bot_state.db'):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS processed_messages (
                message_id INTEGER,
                chat_id INTEGER,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (message_id, chat_id)
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_texts (
                user_key TEXT PRIMARY KEY,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS stats (
                key TEXT PRIMARY KEY,
                value INTEGER DEFAULT 0
            )
        ''')
        self.conn.commit()
    
    def add_processed_message(self, message_id, chat_id):
        cursor = self.conn.cursor()
        cursor.execute(
            'INSERT OR IGNORE INTO processed_messages (message_id, chat_id) VALUES (?, ?)',
            (message_id, chat_id)
        )
        self.conn.commit()
    
    def is_message_processed(self, message_id, chat_id):
        cursor = self.conn.cursor()
        cursor.execute(
            'SELECT 1 FROM processed_messages WHERE message_id = ? AND chat_id = ?',
            (message_id, chat_id)
        )
        return cursor.fetchone() is not None
    
    def add_user_text(self, user_key):
        cursor = self.conn.cursor()
        cursor.execute(
            'INSERT OR IGNORE INTO user_texts (user_key) VALUES (?)',
            (user_key,)
        )
        self.conn.commit()
    
    def is_user_text_exists(self, user_key):
        cursor = self.conn.cursor()
        cursor.execute(
            'SELECT 1 FROM user_texts WHERE user_key = ?',
            (user_key,)
        )
        return cursor.fetchone() is not None
    
    def get_stat(self, key, default=0):
        cursor = self.conn.cursor()
        cursor.execute('SELECT value FROM stats WHERE key = ?', (key,))
        result = cursor.fetchone()
        return result[0] if result else default
    
    def set_stat(self, key, value):
        cursor = self.conn.cursor()
        cursor.execute(
            'INSERT OR REPLACE INTO stats (key, value) VALUES (?, ?)',
            (key, value)
        )
        self.conn.commit()
    
    def increment_stat(self, key):
        current = self.get_stat(key)
        self.set_stat(key, current + 1)

# ------------------- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø -------------------
class Config:
    # üîê API –¥–∞–Ω–Ω—ã–µ
    API_ID = 19244636
    API_HASH = '8a9a412c60f16d05b60b057233c1d6c2'
    BOT_TOKEN = '8414225285:AAG2p81hoOoN2VgUslB5Y5pjabpLYiEemt0'  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
    
    # ‚úÖ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞
    TARGET_CHAT = 'https://t.me/+KqjEK6oRykkwZGUy'
    
    # üîë –ê–¥–º–∏–Ω ID
    ADMIN_ID = 8043262634
    
    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    MESSAGE_AGE_LIMIT_HOURS = 6
    
    # üü¢ –°–∏–≥–Ω–∞–ª—ã –∫–ª–∏–µ–Ω—Ç–∞
    NEED_WORDS = [
        "–∏—â—É", "–∏—â–µ–º", "—Å–Ω—è—Ç—å", "—Å–Ω–∏–º—É", "—Å–Ω–∏–º–µ–º", "—Ö–æ—á—É —Å–Ω—è—Ç—å", "—Ö–æ—Ç–∏–º —Å–Ω—è—Ç—å",
        "–∞—Ä–µ–Ω–¥—É—é", "–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", "–Ω—É–∂–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞", "–Ω—É–∂–µ–Ω –¥–æ–º", "–Ω—É–∂–Ω–æ –∂–∏–ª—å–µ",
        "–Ω—É–∂–Ω–æ –∂–∏–ª—å—ë", "–≤ –ø–æ–∏—Å–∫–∞—Ö", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ", "–∏—â–µ–º –∂–∏–ª—å–µ",
        "—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", "–Ω—É–∂–Ω–∞ –∞—Ä–µ–Ω–¥–∞", "–∏—â—É –∞—Ä–µ–Ω–¥—É", "—Ö–æ—á—É –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å",
        "–∏—â—É –∫–≤–∞—Ä—Ç–∏—Ä—É", "–∏—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É", "—Å–Ω–∏–º—É –∫–≤–∞—Ä—Ç–∏—Ä—É", "—Å–Ω–∏–º—É –¥–æ–º",
        "–∏—â—É –∂–∏–ª—å–µ", "–∏—â—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
    ]
    
    # üè† –°–∏–≥–Ω–∞–ª—ã –∂–∏–ª—å—è
    REAL_ESTATE_WORDS = [
        "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∫–≤–∞—Ä—Ç–∏—Ä—É", "–∫–≤–∞—Ä—Ç–∏—Ä—ã", "–∂–∏–ª—å—ë", "–∂–∏–ª—åe", "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã",
        "–∞–ø–∞—Ä—Ç", "—Å—Ç—É–¥–∏—è", "—Å—Ç—É–¥–∏—é", "–∫–æ–º–Ω–∞—Ç–∞", "–∫–æ–º–Ω–∞—Ç—É", "–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è",
        "–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "—Ç—Ä—ë—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "1+1", "2+1",
        "3+1", "4+1", "–æ–¥–Ω—É—à–∫–∞", "–¥–≤—É—à–∫–∞", "—Ç—Ä—ë—à–∫–∞", "—á–µ—Ç–≤–µ—Ä–∫–∞", "—Å–ø–∞–ª—å–Ω—è",
        "—Å–ø–∞–ª—å–Ω–∏", "–∫–æ–º–Ω–∞—Ç—ã", "–¥–æ–º", "—Ç–∞—É–Ω—Ö–∞—É—Å", "–ø–µ–Ω—Ç—Ö–∞—É—Å", "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã",
        "–ª–æ—Ñ—Ç", "–º–∞–ª–æ—Å–µ–º–µ–π–∫–∞", "–≥–æ—Å—Ç–∏–Ω–∫–∞", "—Ö—Ä—É—â–µ–≤ka", "–±—Ä–µ–∂–Ω–µ–≤ka", "–ø–æ–º–µ—â–µ–Ω–∏–µ"
    ]
    
    # ‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    BLACKLIST = [
        "—Å–¥–∞–º", "—Å–¥–∞—é", "—Å–¥–∞—ë—Ç—Å—è", "—Å–¥–∞–µ—Ç—Å—è", "—Å–¥–∞–≤–∞—Ç—å", "—Å–¥–∞—ë–º", "—Å–¥–∞–µ–º",
        "—Ä–∏–µ–ª—Ç–æ—Ä", "—Ä–∏—ç–ª—Ç–æ—Ä", "–∞–≥–µ–Ω—Ç", "–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ", "–∞–≥–µ–Ω—Ç—ã", "—Ä–∏–µ–ª—Ç–æ—Ä—ã",
        "–ø–æ—Å—Ä–µ–¥–Ω–∏–∫", "–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∏", "–∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å", "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", "–ø—Ä–æ–¥–∞–º",
        "–ø—Ä–æ–¥–∞—é", "–ø—Ä–æ–¥–∞—ë—Ç—Å—è", "–ø—Ä–æ–¥–∞–µ—Ç—Å—è", "–ø—Ä–æ–¥–∞–∂–∞", "—Ö–æ–∑—è–∏–Ω", "–∫–æ–º–∏—Å—Å–∏—è",
        "–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏", "–ø—Ä–æ—Ü–µ–Ω—Ç", "–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤", "—É—Å–ª—É–≥–∏", "–ø–æ–¥–±–µ—Ä—É", "–ø–æ–¥–±–µ—Ä–µ–º",
        "–ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è", "–ø–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–∫–ª–∏–µ–Ω—Ç—ã", "–ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "–≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞", "–≤–∞—à–µ –∂–∏–ª—åe", "–Ω–∞–π–¥—É –∂–∏–ª—å–µ", "–Ω–∞–π–¥—É –∂–∏–ª—å—ë", "–Ω–∞–π–¥–µ–º –∂–∏–ª—åe",
        "–±–∞–∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä", "–±–∞–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–±–∞–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤", "–∞—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–¥ –∫–ª—é—á",
        "–ø–æ–¥ –∫–ª—é—á", "–∑–≤–æ–Ω–∏—Ç–µ", "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å", "–ø–∏—à–∏—Ç–µ", "–¥–∏—Ä–µ–∫—Ç", "—Ç–µ–ª–µ—Ñ–æ–Ω",
        "–ø–æ–¥–ø–∏—Å–∫–∞", "–∫–∞–Ω–∞–ª", "—Ä–µ–∫–ª–∞–º–∞", "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–ø–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞", "–ø—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥—É",
        "—É—Å–ª—É–≥–∞ —Ä–∏–µ–ª—Ç–æ—Ä–∞", "—Ä–∞–±–æ—Ç–∞—é –ø–æ –≥–æ—Ä–æ–¥—É", "–ø–æ–º–æ–≥—É —Å–Ω—è—Ç—å", "–ø–æ–º–æ–≥—É —Å –∞—Ä–µ–Ω–¥–æ–π",
        "—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–±–µ—Ä—É %", "–±–µ—Ä—É –ø—Ä–æ—Ü–µ–Ω—Ç", "—É–±–æ—Ä–∫–∞",
        "—Ä–µ–º–æ–Ω—Ç", "–∫–ª–∏–Ω–∏ng", "5000", "5.000", "5000‚ÇΩ", "5.000‚ÇΩ", "–º–∞—Å—Ç–µ—Ä", "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫",
        "—ç–ª–µ–∫—Ç—Ä–∏–∫", "–º–µ–±–µ–ª—å", "—Å–±–æ—Ä–∫–∞", "—Ä–∞–±–æ—Ç–∞", "–≤–∞–∫–∞–Ω—Å–∏—è", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–æ–ø–ª–∞—Ç–∞",
        "–Ω–∞ —Ä—É–∫–∏", "–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é", "–ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "–±–æ—Ç",
        "–ø—Ä–æ–≤–µ—Ä—è—é", "—Ç–µ—Å—Ç–∏—Ä—É—é", "–±—Ä–∏–≥–∞–¥–∞", "–±—Ä–∏–≥–∞–¥—É", "—à–æ–ø"
    ]
    
    # üö´ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    ADDITIONAL_FILTERS = [
        "–º–µ–¥—Å–µ—Å—Ç—Ä", "–∏–Ω—ä–µ–∫—Ü", "—É–∫–æ–ª", "–≤—Ä–∞—á", "–¥–æ–∫—Ç–æ—Ä", "–±–æ–ª—å–Ω–∏", "–∫–ª–∏–Ω–∏–∫", "–º–µ–¥–∏—Ü–∏–Ω",
        "–ª–µ—á–µ–Ω", "–ø—Ä–æ—Ü–µ–¥—É—Ä", "–∫–∞–ø–µ–ª—å–Ω–∏—Ü", "—É–∫–æ–ª", "–∏–Ω—ä–µ–∫—Ü", "–º–µ–¥–∏–∫", "–º–µ–¥–±—Ä–∞—Ç", "—Ñ–µ–ª—å–¥—à–µ—Ä",
        "—Å–∫–æ—Ä–∞—è", "–∞–ø—Ç–µ–∫", "–ª–µ–∫–∞—Ä—Å—Ç–≤", "–ø—Ä–µ–ø–∞—Ä–∞—Ç", "—Ä–µ–º–æ–Ω—Ç", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤", "–º–∞—Å—Ç–µ—Ä",
        "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫", "—ç–ª–µ–∫—Ç—Ä–∏–∫", "–ø–ª–∏—Ç–æ—á–Ω–∏–∫", "—à—Ç—É–∫–∞—Ç—É—Ä", "–º–∞–ª—è—Ä", "—Å—Ç—Ä–æ–∏—Ç", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
        "–¥—Ä–µ–ª—å", "–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä", "–±–æ–ª–≥–∞—Ä–∫", "—à—Ç—Ä–æ–±–ª–µ–Ω", "–æ—Ç–¥–µ–ª–æ—á–Ω–∏–∫", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "—Ä–µ–º–æ–Ω—Ç–Ω–∏–∫",
        "–º–æ–Ω—Ç–∞–∂–Ω–∏–∫", "—É—Å—Ç–∞–Ω–æ–≤–∫", "–º–æ–Ω—Ç–∞–∂", "–ø—Ä–æ–¥–∞–º", "–∫—É–ø–ª—é", "–æ–±–º–µ–Ω—è—é", "–º–µ–Ω—è—é", "–æ—Ç–¥–∞–º",
        "–ø—Ä–∏–º—É", "–¥–æ–º–∏–Ω–æ", "–≥–µ–æ—Ä–≥–∏–π", "–ª–∏–ª–æ", "—Ö–æ—Ç—å", "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç", "–Ω–∞–ª–∏—á–∏–µ", "–∏—â—É —Ä–∞–±–æ—Ç—É",
        "—Ä–∞–±–æ—Ç–∞ –¥–ª—è", "–≤–∞–∫–∞–Ω—Å–∏—è", "—Ç—Ä–µ–±—É—é—Ç—Å—è", "—Ç—Ä–µ–±—É–µ—Ç—Å—è"
    ]

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø -------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_monitor.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logging.getLogger("telethon").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# ------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø -------------------
db = Database()

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(
    'premium_bot_session', 
    Config.API_ID, 
    Config.API_HASH,
    connection_retries=None,  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
    auto_reconnect=True,      # –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    request_retries=10,       # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
    flood_sleep_threshold=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —Å–Ω–∞
)

# ------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï -------------------
TARGET_CHAT_ID = None
monitoring_status = "üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 24/7"
start_time = datetime.now()
group_stats = Counter()
user_stats = Counter()
chat_title_cache = {}

# ------------------- –£–¢–ò–õ–ò–¢–´ -------------------
def hash_text(text):
    return hashlib.md5(text.encode()).hexdigest()

def get_georgia_time():
    return datetime.now(timezone(timedelta(hours=4)))

def is_admin(sender_id):
    return sender_id == Config.ADMIN_ID

# ------------------- –ü–†–ï–î–ö–û–ú–ü–ò–õ–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ì–£–õ–Ø–†–ö–ò -------------------
COMPILED_PATTERNS = {
    'apartment_pattern': re.compile(r"\b[1-4]\s*[+-]?\s*[1-4]\b"),
    'apartment_names': re.compile(r"\b(–æ–¥–Ω—É—à–∫–∞|–¥–≤—É—à–∫–∞|—Ç—Ä—ë—à–∫–∞|—Ç—Ä–µ—à–∫–∞|—á–µ—Ç–≤–µ—Ä–∫–∞)\b"),
    'price_pattern': re.compile(r'\b\d+[.,]?\d*\s*(‚ÇΩ|—Ä—É–±|—Ä\.|—Ä—Éb–ª–µ–π|–¥–æ–ª–ª–∞—Ä|\$|USD)\b'),
    'multiple_spaces': re.compile(r'\s+')
}

# ------------------- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò -------------------
async def get_chat_title(chat_entity):
    try:
        if chat_entity in chat_title_cache:
            return chat_title_cache[chat_entity]
        
        chat = await client.get_entity(chat_entity)
        title = getattr(chat, 'title', 'Unknown')
        chat_title_cache[chat_entity] = title
        return title
    except:
        return "Unknown"

def is_really_client(text: str) -> bool:
    text_lower = text.lower()
    return not any(forbidden in text_lower for forbidden in Config.ADDITIONAL_FILTERS)

def is_client_message(text: str):
    if not text or len(text.strip()) < 10:
        return False, None
    
    text_lower = text.lower()
    
    if any(bad in text_lower for bad in Config.BLACKLIST):
        return False, None
    
    if not is_really_client(text):
        return False, None
    
    has_need = any(word in text_lower for word in Config.NEED_WORDS)
    if not has_need:
        return False, None
    
    has_real_estate = any(word in text_lower for word in Config.REAL_ESTATE_WORDS)
    
    if not has_real_estate:
        if (COMPILED_PATTERNS['apartment_pattern'].search(text_lower) or 
            COMPILED_PATTERNS['apartment_names'].search(text_lower)):
            has_real_estate = True
    
    if not has_real_estate:
        return False, None
    
    if is_likely_spam(text_lower):
        return False, None
    
    found_word = next((w for w in Config.NEED_WORDS if w in text_lower), None)
    return True, found_word

def is_likely_spam(text: str) -> bool:
    if len(re.findall(r'\d', text)) > 15:
        return True
    
    if COMPILED_PATTERNS['price_pattern'].search(text):
        return True
    
    if len(text) < 50 and text.count('!') > 2:
        return True
    
    work_keywords = ["—Ä–∞–±–æ—Ç–∞", "–≤–∞–∫–∞–Ω—Å–∏—è", "—É—Å–ª—É–≥–∏", "–º–∞—Å—Ç–µ—Ä", "—Ä–µ–ºont", 
                    "—É–±–æ—Ä–∫–∞", "–∫–ª–∏–Ω–∏–Ω–≥", "—Å–±–æ—Ä–∫–∞", "–∑–∞—Ä–ø–ª–∞—Ç–∞"]
    return any(word in text for word in work_keywords)

def format_message_info(chat_title, message_text, sender, found_word, message_link, message_date):
    first_name = getattr(sender, 'first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    username = getattr(sender, 'username', None)
    
    if message_date.tzinfo is None:
        message_date = message_date.replace(tzinfo=timezone.utc)
    georgia_time = message_date.astimezone(timezone(timedelta(hours=4)))
    date_str = georgia_time.strftime("%d.%m.%Y %H:%M")
    
    cleaned_text = COMPILED_PATTERNS['multiple_spaces'].sub(' ', message_text.strip())
    
    msg = (
        "üè† <b>–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï!</b>\n\n"
        f"üìã <b>–ì—Ä—É–ø–ø–∞:</b> {chat_title}\n\n"
        f"üîë <b>–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:</b> <code>{found_word}</code>\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {date_str} (–¢–±–∏–ª–∏—Å–∏)\n\n"
        f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {first_name}"
    )
    
    if username:
        msg += f" (@{username})"
    else:
        msg += " (–Ω–µ—Ç username)"
    
    msg += (
        f"\n\nüìù <b>–¢–µ–∫—Å—Ç:</b>\n<code>{cleaned_text[:400]}</code>"
        + (f"..." if len(cleaned_text) > 400 else "") + "\n\n"
        f"üîó <a href=\"{message_link}\">–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"
    )
    
    return msg

def create_message_link(chat_entity, message_id):
    try:
        if hasattr(chat_entity, 'username') and chat_entity.username:
            return f"https://t.me/{chat_entity.username}/{message_id}"
        else:
            chat_id = getattr(chat_entity, 'id', '')
            if str(chat_id).startswith("-100"):
                chat_id = str(chat_id)[4:]
            return f"https://t.me/c/{chat_id}/{message_id}"
    except:
        return ""

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô -------------------
async def process_message(message):
    try:
        if not message.text:
            return False
        
        text = message.text.strip()
        if not text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ)
        message_time = message.date
        current_time = datetime.now(message_time.tzinfo) if message_time.tzinfo else datetime.now()
        
        if (current_time - message_time).total_seconds() > Config.MESSAGE_AGE_LIMIT_HOURS * 3600:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if db.is_message_processed(message.id, message.chat_id):
            return False
        
        db.add_processed_message(message.id, message.chat_id)
        db.increment_stat('total_scanned')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        ok, found_word = is_client_message(text)
        if not ok:
            db.increment_stat('skipped')
            return False
        
        sender = await message.get_sender()
        if sender is None:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        user_key = hash_text(f"{sender.id}_{text}")
        if db.is_user_text_exists(user_key):
            db.increment_stat('skipped')
            return False

        db.add_user_text(user_key)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_title = await get_chat_title(message.chat_id)
        message_link = create_message_link(message.chat, message.id)
        formatted_msg = format_message_info(chat_title, text, sender, found_word, message_link, message.date)
        
        await client.send_message(TARGET_CHAT_ID, formatted_msg, parse_mode="html")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        db.increment_stat('found')
        db.set_stat('last_found_time', get_georgia_time().strftime("%d.%m.%Y %H:%M"))
        
        group_stats[chat_title] += 1
        user_stats[sender.id] += 1
        
        logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù–û: {found_word} –≤ {chat_title}")
        
        return True
        
    except Exception as e:
        db.increment_stat('errors')
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

@client.on(events.NewMessage)
async def handler(event):
    try:
        if event.chat_id == TARGET_CHAT_ID:
            return

        if not (event.is_group or event.is_channel):
            return
        
        await process_message(event.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

# ------------------- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê -------------------
@client.on(events.NewMessage(pattern='/start'))
async def start_command(event):
    try:
        if is_admin(event.sender_id):
            uptime = datetime.now() - start_time
            hours, remainder = divmod(uptime.total_seconds(), 3600)
            minutes = remainder // 60
            
            welcome_msg = (
                "ü§ñ <b>üè† –ë–û–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò 24/7</b>\n\n"
                "‚ú® <i>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</i>\n\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {get_georgia_time().strftime('%d.%m.%Y %H:%M')} (–¢–±–∏–ª–∏—Å–∏)\n"
                f"üîÑ <b>–ê–ø—Ç–∞–π–º:</b> {int(hours)}—á {int(minutes)}–º\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {monitoring_status}\n\n"
                f"üì® <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {db.get_stat('total_scanned')}\n"
                f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b> {db.get_stat('found')}\n"
                f"üîç <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞—Ö–æ–¥–∫–∞:</b> {db.get_stat('last_found_time', '–ù–µ—Ç')}\n\n"
                "‚ö° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>"
            )
        else:
            welcome_msg = (
                "üè† <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¢–±–∏–ª–∏—Å–∏</b>\n\n"
                "üîç <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
                "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—é –≥—Ä—É–ø–ø—ã –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ 24/7\n"
                "‚Ä¢ –ò—â—É –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –∂–∏–ª—å–µ\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
                f"üìä <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b> {db.get_stat('total_scanned')}\n"
                f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:</b> {db.get_stat('found')}\n\n"
                "üí° <b>–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
        
        await event.respond(welcome_msg, parse_mode="html")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

@client.on(events.NewMessage(pattern='/admin'))
async def admin_panel(event):
    try:
        if not is_admin(event.sender_id):
            await event.respond("‚ö†Ô∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>", parse_mode="html")
            return

        buttons = [
            [Button.inline("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", b"stats"), Button.inline("üîÑ –°—Ç–∞—Ç—É—Å", b"status")],
            [Button.inline("üìà –¢–æ–ø –≥—Ä—É–ø–ø", b"graph_groups"), Button.inline("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", b"users")],
            [Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", b"refresh"), Button.inline("üÜò –ü–æ–º–æ—â—å", b"help")]
        ]

        await event.respond(
            f"üéõÔ∏è <b>‚öôÔ∏è –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø</b>\n\n"
            f"üìä <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {monitoring_status}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {get_georgia_time().strftime('%d.%m.%Y %H:%M')}\n"
            f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ:</b> {db.get_stat('found')} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            f"üì® <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {db.get_stat('total_scanned')} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
            buttons=buttons, 
            parse_mode="html"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /admin: {e}")

@client.on(events.CallbackQuery)
async def callback_handler(event):
    try:
        if not is_admin(event.sender_id):
            await event.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", alert=True)
            return
        
        data = event.data
        georgia_time = get_georgia_time().strftime("%d.%m.%Y %H:%M")
        
        if data == b'stats':
            uptime = datetime.now() - start_time
            hours, remainder = divmod(uptime.total_seconds(), 3600)
            minutes = remainder // 60
            
            msg = (
                "üìä <b>üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {georgia_time}\n"
                f"üîÑ <b>–ê–ø—Ç–∞–π–º:</b> {int(hours)}—á {int(minutes)}–º\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {monitoring_status}\n\n"
                f"üì® <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {db.get_stat('total_scanned')}\n"
                f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b> {db.get_stat('found')}\n"
                f"‚è≠Ô∏è <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ:</b> {db.get_stat('skipped')}\n"
                f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {db.get_stat('errors')}\n\n"
                f"üîç <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞—Ö–æ–¥–∫–∞:</b> {db.get_stat('last_found_time', '–ù–µ—Ç')}"
            )
            await event.edit(msg, parse_mode="html")
            
        elif data == b'status':
            msg = (
                "üü¢ <b>üì° –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>\n\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {georgia_time}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {monitoring_status}\n\n"
                f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {db.get_stat('total_scanned')}\n"
                f"‚úÖ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ:</b> {db.get_stat('found')}\n"
                f"üë§ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π:</b> {len(user_stats)}\n"
                f"üè† <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø:</b> {len(group_stats)}\n\n"
                "üí° <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>"
            )
            await event.edit(msg, parse_mode="html")
            
        elif data == b'graph_groups':
            if not group_stats:
                await event.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", alert=True)
                return
            
            plt.figure(figsize=(10, 6))
            top_groups = group_stats.most_common(5)
                
            labels, values = zip(*top_groups)
            
            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A602', '#9BE564']
            bars = plt.bar(range(len(labels)), values, color=colors[:len(labels)])
            
            plt.xticks(range(len(labels)), labels, rotation=45, ha='right')
            plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            plt.title("üìà –¢–û–ü-5 –ì–†–£–ü–ü –ü–û –ù–ê–ô–î–ï–ù–ù–´–ú –û–ë–™–Ø–í–õ–ï–ù–ò–Ø–ú")
            
            for i, (bar, value) in enumerate(zip(bars, values)):
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                        f'{value}', ha='center', va='bottom', fontweight='bold')
            
            plt.tight_layout()
            
            buf = BytesIO()
            plt.savefig(buf, format='png', dpi=80, bbox_inches='tight')
            buf.seek(0)
            plt.close()
            
            await client.send_file(event.chat_id, buf, caption="üìä <b>–¢–æ–ø –≥—Ä—É–ø–ø –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º</b>", parse_mode="html")
            await event.answer("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        elif data == b'users':
            if not user_stats:
                await event.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö", alert=True)
                return
            
            top_users = user_stats.most_common(10)
            users_list = "üë• <b>–¢–û–ü-10 –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï–ô:</b>\n\n"
            
            for i, (user_id, count) in enumerate(top_users, 1):
                users_list += f"{i}. ID {user_id}: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
            
            await event.edit(users_list, parse_mode="html")
            
        elif data == b'refresh':
            await admin_panel(event)
            await event.answer("üîÑ –ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        elif data == b'help':
            help_msg = (
                "üÜò <b>‚ùì –ü–û–ú–û–©–¨ –ü–û –ö–û–ú–ê–ù–î–ê–ú</b>\n\n"
                "‚Ä¢ /start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
                "‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
                "üìã <b>–ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>\n"
                "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ üîÑ –°—Ç–∞—Ç—É—Å - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "‚Ä¢ üìà –¢–æ–ø –≥—Ä—É–ø–ø - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¢–æ–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π\n"
                "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å - –û–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å\n"
                "‚Ä¢ üÜò –ü–æ–º–æ—â—å - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>\n"
                "‚Ä¢ üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≥—Ä—É–ø–ø—ã 24/7\n"
                "‚Ä¢ üîç –ò—â–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
                "‚Ä¢ üì® –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç\n\n"
                "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n"
                "üìç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> –¢–±–∏–ª–∏—Å–∏ (UTC+4)"
            )
            await event.edit(help_msg, parse_mode="html")
            
        else:
            await event.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        await event.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", alert=True)

# ------------------- –ó–ê–ü–£–°–ö –ë–û–¢–ê -------------------
async def main():
    global TARGET_CHAT_ID
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        await client.start(bot_token=Config.BOT_TOKEN)
        logger.info("üöÄ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω!")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
        entity = await client.get_entity(Config.TARGET_CHAT)
        TARGET_CHAT_ID = entity.id
        logger.info(f"‚úÖ TARGET_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {TARGET_CHAT_ID}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client.send_message(
            Config.ADMIN_ID, 
            "üéâ <b>ü§ñ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!</b>\n\n"
            "‚ú® <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            "üìã <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> 24/7 —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "üéØ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> –í—Å–µ –≥—Ä—É–ø–ø—ã —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é\n"
            "‚è∞ <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b> –¢–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n"
            f"üïí <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {get_georgia_time().strftime('%d.%m.%Y %H:%M')}\n"
            "üìç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> –¢–±–∏–ª–∏—Å–∏ (UTC+4)\n\n"
            "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>",
            parse_mode="html"
        )
        
        logger.info("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ 24/7")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)
        await main()

if __name__ == "__main__":
    print("üéØ " + "="*50)
    print("ü§ñ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò 24/7")
    print("üéØ " + "="*50)
    print("üìç –†–µ–∂–∏–º: –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
    print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π")
    print("üè† –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –¢–±–∏–ª–∏—Å–∏ (UTC+4)")
    print("üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("üéØ " + "="*50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
